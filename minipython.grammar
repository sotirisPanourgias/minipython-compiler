/*
* 3200135 ΘΕΟΦΑΝΗΣ ΠΑΠΑΔΟΠΟΥΛΟΣ
*3200128 ΣΩΤΗΡΙΟΣ ΠΑΝΟΥΡΓΙΑΣ
*/

// Δημιουργία του προεπιλεγμένου πακέτου "minipython"
Package minipython;

// Ορισμός βοηθητικών συνόλων
Helpers
    digit = ['0' .. '9'];
    letter = ['a' .. 'z']|['A' .. 'Z']; 
    cr = 13; 
    lf = 10;
    all = [0..127]; 
    eol = lf | cr | cr lf ;
    not_eol = [all - [cr + lf]]; 
    quote = '"';
    single_quote = ''';

// Ορισμός των τερματικών συμβόλων
Tokens
    // Τερματικό σύμβολο για το tab
    tab = 9;

    // Αριθμητικοί τελεστές
    plus = '+';
    minus_eq = '-=';
    minus = '-';
    dmult = '**';
    mult = '*';
    div_eq = '/=';
    div = '/';
    mod = '%';

    // Σχετικοί τελεστές
    comp_eq = '==';
    great_eq = '>=';
    less_eq = '<=';
    not_eq = '!=';
    eq = '=';
    exclam = '!';

    // Λέξεις-κλειδιά
    def = 'def';
    l_par = '(';
    r_par = ')';
    l_br = '[';
    r_br = ']';
    comma=',';
    and = 'and';
    or = 'or';
    not = 'not';
    if = 'if';
    elif = 'elif';
    else = 'else';
    while = 'while';
    for = 'for';
    in = 'in';
    print = 'print';
    return = 'return';
    assert = 'assert';
    len = 'len';
    max = 'max';
    min = 'min';
    import = 'import';
    from = 'from';
    none = 'None';
    as = 'as';
    less = '<';
    great = '>';
    true = 'true';
    semi = ':';
    false = 'false';
    blank = (' ' | lf | cr);
    line_comment = '#' not_eol* eol; 
    number = digit+ | (digit+ '.' digit+);
    id = (letter | '_')(letter | digit | '_')*;
    string_literal = quote [not_eol - quote]* quote | 
                    single_quote [not_eol - single_quote]* single_quote;
    sep = '.';

// Αγνόηση κενών και σχολίων
Ignored Tokens
    blank, line_comment;

// Ορισμός των παραγωγών
Productions
    goal = goal_helper*;
    goal_helper = {func} function | {stmt} statement;

    // Ορισμός συνάρτησης
    function = def id l_par argument? r_par semi statement;

    // Ορισμός ορίσματος
    argument = id assignment? not_first_argument*;

    // Επιπρόσθετα ορίσματα
    not_first_argument = comma id assignment?;

    // Ορισμός ανάθεσης τιμής
    assignment = eq value;

    // Ορισμός εντολών
    statement = {condition} tab* if comparison_or semi statement |
                {loop_while} tab* while comparison_or semi statement |
                {loop_for} tab* for [id1]:id in [id2]:id semi statement |
                {return} tab* return expression |
                {print} tab* print expression not_first_arg* |
                {assign_eq} tab* id eq expression |
                {assign_mineq} tab* id minus_eq expression |
                {assign_diveq} tab* id div_eq expression |
                {array_assign} tab* id l_br [ex1]:expression r_br eq [ex2]:expression |
                {assert} tab* assert expression not_first_arg? |
                {func_call} tab* func_call |
                {import} import_rule;
	/* 
	* Εάν προσπαθήσουμε να μεταφράσουμε το BNF απευθείας, θα υπάρξουν συγκρούσεις shift/reduce. Έτσι, κατασκευάσαμε 
	* τους κανόνες multiplication, power και first_level που συγκεντρώνουν διάφορες επιλογές με 
	* ίδια/παρόμοια προτεραιότητα για να αποφευχθεί αυτό.
	*/
    
    // Ορισμός εκφράσεων με πολλαπλασιασμό, διαίρεση, κ.λπ.
    expression = {mult} multiplication |
                {plus} expression plus multiplication |
                {minus} expression minus multiplication;
    
    multiplication = {power} power | 
                    {multiplication} multiplication mult power |
                    {division} multiplication div power |
                    {mod} multiplication mod power;
	par_exp = l_par expression r_par;
    // Ορισμός υψώσεως σε δύναμη
    power = {something} first_level |
            {power} power dmult first_level;

    // Εκφράσεις με χαμηλότερη προτεραιότητα
    first_level = {val} value |
                {identifier} id |
                {max} max l_par value not_first_value* r_par |
                {min} min l_par value not_first_value* r_par |
                {len} len l_par expression r_par |
                {function} func_call |
                {subscription} id l_br expression r_br |
                {array} l_br expression not_first_expression* r_br;

    not_first_value = comma value;

    not_first_expression = comma expression;

    // Ορισμός εισαγωγής
    import_rule = {without_from} import module import_alias? not_first_import_module* |
                {with_from} from module import id import_alias? not_first_import_id*;

    module = module_caller* id;

    module_caller = id sep;

    not_first_import_module = comma module import_alias?;

    // Επιπρόσθετα ονόματα για εισαγωγή
    not_first_import_id = comma id import_alias?;

    // Ορισμός ψευδωνύμων για εισαγωγή
    import_alias = as id;

    // Κλήση συνάρτησης
    func_call = id l_par arglist? r_par;

    // Ορισμός ορισμάτων
    arglist = expression not_first_arg*;

    // Επιπρόσθετα ορίσματα
    not_first_arg = comma expression;

    // Σύγκριση με OR
    comparison_or = {comp_and} comparison_and |
                    {or_comp} comparison_or or comparison_and;

    // Σύγκριση με AND
    comparison_and = {comparison} comparison |
                        {and_comp} comparison_and and comparison;
	comparison_not = {not_c} not comparison;
    // Σύγκριση
    comparison = {great} [exp1]:expression great [exp2]:expression |
                {less} [exp1]:expression less [exp2]:expression |
                {great_eq} [exp1]:expression great_eq [exp2]:expression |
                {less_eq} [exp1]:expression less_eq [exp2]:expression |
                {not_eq} [exp1]:expression not_eq [exp2]:expression |    
                {comp_eq} [exp1]:expression comp_eq [exp2]:expression |
                {true} true |
                {false} false ;
                

    // Τιμές
    value = {f_call} id sep func_call |
            {num} number |
            {string} string_literal |
            {none} none;

